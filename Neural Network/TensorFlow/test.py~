import numpy as np
import tensorflow as tf

def BoundaryFunction(domain, Ns):
  '''
  Computing the boundary function G(x)
  t0 = starting time
  tN = end time
  Nt = number of points in time
  Ns = size of data set
  '''
  x_train = np.random.rand(Ns, 1, 1)
  y_train = x_train[:, :, 0] - np.ones((Ns, 1)) * domain[0]

  # Create ANN for the boundary function G(x)
  
  model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(input_shape=(1, 1)),
    tf.keras.layers.Dense(512, activation=tf.nn.relu),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(10, activation=tf.nn.softmax)
  ])
  
  model.compile(optimizer='adam',
                loss='sparse_categorical_crossentropy',
                metrics=['accuracy'])

  model.fit(x_train, y_train, epochs=5)


  x_test = np.random.rand(Ns, 1, 1)
  y_test = x_test[:, :, 0] - np.ones((Ns, 1)) * domain[0]
  model.evaluate(x_test, y_test)

  return model

def DistanceFunction(domain, Ns):
  '''
  Computing distance function
  Ns = size of data set
  '''

  x_train = np.random.rand(Ns)
  y_train = x_train[:] - np.ones(Ns) * domain[0]

  # Create ANN for the distance function D(x)
  
  model = tf.keras.models.Sequential([
    #tf.keras.layers.Dense(1, activation=tf.nn.relu),
    tf.keras.layers.Dropout(0.1),
    tf.keras.layers.Dense(2, activation=tf.nn.softmax)
  ])
  
  model.compile(optimizer='adam',
                loss='sparse_categorical_crossentropy',
                metrics=['accuracy'])

  model.fit(x_train, y_train, epochs=5)


  x_test = np.random.rand(Ns, 1, 1)
  y_test = x_test[:, :, 0] - np.ones((Ns, 1)) * domain[0]
  model.evaluate(x_test, y_test)

  x = np.random.rand(1, 1, 1)
  print(x)
  print(model.predict(x))
 
  return model

domain = [0.0, 1.0]
Ns = 1000
# Compute the distance function D(x)
distANN = DistanceFunction(domain, Ns)

'''
# Compute the boundary function G(x)
boundaryANN = BoundaryFunction(domain, Ns)
'''
#mnist = tf.keras.datasets.mnist

#(x_train, y_train),(x_test, y_test) = mnist.load_data()
#x_train, x_test = x_train / 255.0, x_test / 255.0

#print(type(x_train))
#print(np.shape(x_train))
#print(type(y_train))
#print(np.shape(y_train))
'''
x_train_new = np.random.rand(2000,10,1)
y_train_new = np.ones((2000, 1)) / 2.0

x_test_new = np.random.rand(1000,10, 1)
y_test_new = np.ones((1000, 1))/ 2.0

model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(10, 1)),
  tf.keras.layers.Dense(512, activation=tf.nn.relu),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10, activation=tf.nn.softmax)
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train_new, y_train_new, epochs=5)
model.evaluate(x_test_new, y_test_new)
'''
